/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Locale } from "./Locale";
import { LocaleCountArgs } from "./LocaleCountArgs";
import { LocaleFindManyArgs } from "./LocaleFindManyArgs";
import { LocaleFindUniqueArgs } from "./LocaleFindUniqueArgs";
import { CreateLocaleArgs } from "./CreateLocaleArgs";
import { UpdateLocaleArgs } from "./UpdateLocaleArgs";
import { DeleteLocaleArgs } from "./DeleteLocaleArgs";
import { LocaleService } from "../locale.service";
@graphql.Resolver(() => Locale)
export class LocaleResolverBase {
  constructor(protected readonly service: LocaleService) {}

  async _localesMeta(
    @graphql.Args() args: LocaleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Locale])
  async locales(@graphql.Args() args: LocaleFindManyArgs): Promise<Locale[]> {
    return this.service.locales(args);
  }

  @graphql.Query(() => Locale, { nullable: true })
  async locale(
    @graphql.Args() args: LocaleFindUniqueArgs
  ): Promise<Locale | null> {
    const result = await this.service.locale(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Locale)
  async createLocale(@graphql.Args() args: CreateLocaleArgs): Promise<Locale> {
    return await this.service.createLocale({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Locale)
  async updateLocale(
    @graphql.Args() args: UpdateLocaleArgs
  ): Promise<Locale | null> {
    try {
      return await this.service.updateLocale({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Locale)
  async deleteLocale(
    @graphql.Args() args: DeleteLocaleArgs
  ): Promise<Locale | null> {
    try {
      return await this.service.deleteLocale(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
