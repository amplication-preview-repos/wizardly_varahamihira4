/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PracticeService } from "../practice.service";
import { PracticeCreateInput } from "./PracticeCreateInput";
import { Practice } from "./Practice";
import { PracticeFindManyArgs } from "./PracticeFindManyArgs";
import { PracticeWhereUniqueInput } from "./PracticeWhereUniqueInput";
import { PracticeUpdateInput } from "./PracticeUpdateInput";
import { UserPracticeResponseFindManyArgs } from "../../userPracticeResponse/base/UserPracticeResponseFindManyArgs";
import { UserPracticeResponse } from "../../userPracticeResponse/base/UserPracticeResponse";
import { UserPracticeResponseWhereUniqueInput } from "../../userPracticeResponse/base/UserPracticeResponseWhereUniqueInput";

export class PracticeControllerBase {
  constructor(protected readonly service: PracticeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Practice })
  async createPractice(
    @common.Body() data: PracticeCreateInput
  ): Promise<Practice> {
    return await this.service.createPractice({
      data: {
        ...data,

        lesson: data.lesson
          ? {
              connect: data.lesson,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        lesson: {
          select: {
            id: true,
          },
        },

        textTask: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Practice] })
  @ApiNestedQuery(PracticeFindManyArgs)
  async practices(@common.Req() request: Request): Promise<Practice[]> {
    const args = plainToClass(PracticeFindManyArgs, request.query);
    return this.service.practices({
      ...args,
      select: {
        createdAt: true,
        id: true,

        lesson: {
          select: {
            id: true,
          },
        },

        textTask: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Practice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async practice(
    @common.Param() params: PracticeWhereUniqueInput
  ): Promise<Practice | null> {
    const result = await this.service.practice({
      where: params,
      select: {
        createdAt: true,
        id: true,

        lesson: {
          select: {
            id: true,
          },
        },

        textTask: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Practice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePractice(
    @common.Param() params: PracticeWhereUniqueInput,
    @common.Body() data: PracticeUpdateInput
  ): Promise<Practice | null> {
    try {
      return await this.service.updatePractice({
        where: params,
        data: {
          ...data,

          lesson: data.lesson
            ? {
                connect: data.lesson,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          lesson: {
            select: {
              id: true,
            },
          },

          textTask: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Practice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePractice(
    @common.Param() params: PracticeWhereUniqueInput
  ): Promise<Practice | null> {
    try {
      return await this.service.deletePractice({
        where: params,
        select: {
          createdAt: true,
          id: true,

          lesson: {
            select: {
              id: true,
            },
          },

          textTask: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/userPracticeResponses")
  @ApiNestedQuery(UserPracticeResponseFindManyArgs)
  async findUserPracticeResponses(
    @common.Req() request: Request,
    @common.Param() params: PracticeWhereUniqueInput
  ): Promise<UserPracticeResponse[]> {
    const query = plainToClass(UserPracticeResponseFindManyArgs, request.query);
    const results = await this.service.findUserPracticeResponses(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        practice: {
          select: {
            id: true,
          },
        },

        response: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userPracticeResponses")
  async connectUserPracticeResponses(
    @common.Param() params: PracticeWhereUniqueInput,
    @common.Body() body: UserPracticeResponseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userPracticeResponses: {
        connect: body,
      },
    };
    await this.service.updatePractice({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userPracticeResponses")
  async updateUserPracticeResponses(
    @common.Param() params: PracticeWhereUniqueInput,
    @common.Body() body: UserPracticeResponseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userPracticeResponses: {
        set: body,
      },
    };
    await this.service.updatePractice({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userPracticeResponses")
  async disconnectUserPracticeResponses(
    @common.Param() params: PracticeWhereUniqueInput,
    @common.Body() body: UserPracticeResponseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userPracticeResponses: {
        disconnect: body,
      },
    };
    await this.service.updatePractice({
      where: params,
      data,
      select: { id: true },
    });
  }
}
