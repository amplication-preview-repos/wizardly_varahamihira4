/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Practice } from "./Practice";
import { PracticeCountArgs } from "./PracticeCountArgs";
import { PracticeFindManyArgs } from "./PracticeFindManyArgs";
import { PracticeFindUniqueArgs } from "./PracticeFindUniqueArgs";
import { CreatePracticeArgs } from "./CreatePracticeArgs";
import { UpdatePracticeArgs } from "./UpdatePracticeArgs";
import { DeletePracticeArgs } from "./DeletePracticeArgs";
import { UserPracticeResponseFindManyArgs } from "../../userPracticeResponse/base/UserPracticeResponseFindManyArgs";
import { UserPracticeResponse } from "../../userPracticeResponse/base/UserPracticeResponse";
import { Lesson } from "../../lesson/base/Lesson";
import { PracticeService } from "../practice.service";
@graphql.Resolver(() => Practice)
export class PracticeResolverBase {
  constructor(protected readonly service: PracticeService) {}

  async _practicesMeta(
    @graphql.Args() args: PracticeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Practice])
  async practices(
    @graphql.Args() args: PracticeFindManyArgs
  ): Promise<Practice[]> {
    return this.service.practices(args);
  }

  @graphql.Query(() => Practice, { nullable: true })
  async practice(
    @graphql.Args() args: PracticeFindUniqueArgs
  ): Promise<Practice | null> {
    const result = await this.service.practice(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Practice)
  async createPractice(
    @graphql.Args() args: CreatePracticeArgs
  ): Promise<Practice> {
    return await this.service.createPractice({
      ...args,
      data: {
        ...args.data,

        lesson: args.data.lesson
          ? {
              connect: args.data.lesson,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Practice)
  async updatePractice(
    @graphql.Args() args: UpdatePracticeArgs
  ): Promise<Practice | null> {
    try {
      return await this.service.updatePractice({
        ...args,
        data: {
          ...args.data,

          lesson: args.data.lesson
            ? {
                connect: args.data.lesson,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Practice)
  async deletePractice(
    @graphql.Args() args: DeletePracticeArgs
  ): Promise<Practice | null> {
    try {
      return await this.service.deletePractice(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [UserPracticeResponse], {
    name: "userPracticeResponses",
  })
  async findUserPracticeResponses(
    @graphql.Parent() parent: Practice,
    @graphql.Args() args: UserPracticeResponseFindManyArgs
  ): Promise<UserPracticeResponse[]> {
    const results = await this.service.findUserPracticeResponses(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Lesson, {
    nullable: true,
    name: "lesson",
  })
  async getLesson(@graphql.Parent() parent: Practice): Promise<Lesson | null> {
    const result = await this.service.getLesson(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
