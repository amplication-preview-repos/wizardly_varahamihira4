/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Practice as PrismaPractice,
  UserPracticeResponse as PrismaUserPracticeResponse,
  Lesson as PrismaLesson,
} from "@prisma/client";

export class PracticeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PracticeCountArgs, "select">): Promise<number> {
    return this.prisma.practice.count(args);
  }

  async practices(
    args: Prisma.PracticeFindManyArgs
  ): Promise<PrismaPractice[]> {
    return this.prisma.practice.findMany(args);
  }
  async practice(
    args: Prisma.PracticeFindUniqueArgs
  ): Promise<PrismaPractice | null> {
    return this.prisma.practice.findUnique(args);
  }
  async createPractice(
    args: Prisma.PracticeCreateArgs
  ): Promise<PrismaPractice> {
    return this.prisma.practice.create(args);
  }
  async updatePractice(
    args: Prisma.PracticeUpdateArgs
  ): Promise<PrismaPractice> {
    return this.prisma.practice.update(args);
  }
  async deletePractice(
    args: Prisma.PracticeDeleteArgs
  ): Promise<PrismaPractice> {
    return this.prisma.practice.delete(args);
  }

  async findUserPracticeResponses(
    parentId: string,
    args: Prisma.UserPracticeResponseFindManyArgs
  ): Promise<PrismaUserPracticeResponse[]> {
    return this.prisma.practice
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userPracticeResponses(args);
  }

  async getLesson(parentId: string): Promise<PrismaLesson | null> {
    return this.prisma.practice
      .findUnique({
        where: { id: parentId },
      })
      .lesson();
  }
}
