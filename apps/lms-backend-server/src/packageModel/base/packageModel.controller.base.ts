/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PackageModelService } from "../packageModel.service";
import { PackageModelCreateInput } from "./PackageModelCreateInput";
import { PackageModel } from "./PackageModel";
import { PackageModelFindManyArgs } from "./PackageModelFindManyArgs";
import { PackageModelWhereUniqueInput } from "./PackageModelWhereUniqueInput";
import { PackageModelUpdateInput } from "./PackageModelUpdateInput";
import { LessonFindManyArgs } from "../../lesson/base/LessonFindManyArgs";
import { Lesson } from "../../lesson/base/Lesson";
import { LessonWhereUniqueInput } from "../../lesson/base/LessonWhereUniqueInput";
import { UserPackageFindManyArgs } from "../../userPackage/base/UserPackageFindManyArgs";
import { UserPackage } from "../../userPackage/base/UserPackage";
import { UserPackageWhereUniqueInput } from "../../userPackage/base/UserPackageWhereUniqueInput";

export class PackageModelControllerBase {
  constructor(protected readonly service: PackageModelService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PackageModel })
  async createPackageModel(
    @common.Body() data: PackageModelCreateInput
  ): Promise<PackageModel> {
    return await this.service.createPackageModel({
      data: {
        ...data,

        course: data.course
          ? {
              connect: data.course,
            }
          : undefined,
      },
      select: {
        course: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        deletedAt: true,
        endDate: true,
        homeworkCheckEndDate: true,
        id: true,
        sequenceNumber: true,
        startDate: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PackageModel] })
  @ApiNestedQuery(PackageModelFindManyArgs)
  async packageModels(@common.Req() request: Request): Promise<PackageModel[]> {
    const args = plainToClass(PackageModelFindManyArgs, request.query);
    return this.service.packageModels({
      ...args,
      select: {
        course: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        deletedAt: true,
        endDate: true,
        homeworkCheckEndDate: true,
        id: true,
        sequenceNumber: true,
        startDate: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PackageModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async packageModel(
    @common.Param() params: PackageModelWhereUniqueInput
  ): Promise<PackageModel | null> {
    const result = await this.service.packageModel({
      where: params,
      select: {
        course: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        deletedAt: true,
        endDate: true,
        homeworkCheckEndDate: true,
        id: true,
        sequenceNumber: true,
        startDate: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PackageModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePackageModel(
    @common.Param() params: PackageModelWhereUniqueInput,
    @common.Body() data: PackageModelUpdateInput
  ): Promise<PackageModel | null> {
    try {
      return await this.service.updatePackageModel({
        where: params,
        data: {
          ...data,

          course: data.course
            ? {
                connect: data.course,
              }
            : undefined,
        },
        select: {
          course: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          deletedAt: true,
          endDate: true,
          homeworkCheckEndDate: true,
          id: true,
          sequenceNumber: true,
          startDate: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PackageModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePackageModel(
    @common.Param() params: PackageModelWhereUniqueInput
  ): Promise<PackageModel | null> {
    try {
      return await this.service.deletePackageModel({
        where: params,
        select: {
          course: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          deletedAt: true,
          endDate: true,
          homeworkCheckEndDate: true,
          id: true,
          sequenceNumber: true,
          startDate: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/lessons")
  @ApiNestedQuery(LessonFindManyArgs)
  async findLessons(
    @common.Req() request: Request,
    @common.Param() params: PackageModelWhereUniqueInput
  ): Promise<Lesson[]> {
    const query = plainToClass(LessonFindManyArgs, request.query);
    const results = await this.service.findLessons(params.id, {
      ...query,
      select: {
        content: true,
        createdAt: true,
        deletedAt: true,
        id: true,

        packageField: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/lessons")
  async connectLessons(
    @common.Param() params: PackageModelWhereUniqueInput,
    @common.Body() body: LessonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lessons: {
        connect: body,
      },
    };
    await this.service.updatePackageModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/lessons")
  async updateLessons(
    @common.Param() params: PackageModelWhereUniqueInput,
    @common.Body() body: LessonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lessons: {
        set: body,
      },
    };
    await this.service.updatePackageModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/lessons")
  async disconnectLessons(
    @common.Param() params: PackageModelWhereUniqueInput,
    @common.Body() body: LessonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lessons: {
        disconnect: body,
      },
    };
    await this.service.updatePackageModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userPackages")
  @ApiNestedQuery(UserPackageFindManyArgs)
  async findUserPackages(
    @common.Req() request: Request,
    @common.Param() params: PackageModelWhereUniqueInput
  ): Promise<UserPackage[]> {
    const query = plainToClass(UserPackageFindManyArgs, request.query);
    const results = await this.service.findUserPackages(params.id, {
      ...query,
      select: {
        createdAt: true,
        deletedAt: true,
        id: true,

        packageField: {
          select: {
            id: true,
          },
        },

        purchaseDate: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userPackages")
  async connectUserPackages(
    @common.Param() params: PackageModelWhereUniqueInput,
    @common.Body() body: UserPackageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userPackages: {
        connect: body,
      },
    };
    await this.service.updatePackageModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userPackages")
  async updateUserPackages(
    @common.Param() params: PackageModelWhereUniqueInput,
    @common.Body() body: UserPackageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userPackages: {
        set: body,
      },
    };
    await this.service.updatePackageModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userPackages")
  async disconnectUserPackages(
    @common.Param() params: PackageModelWhereUniqueInput,
    @common.Body() body: UserPackageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userPackages: {
        disconnect: body,
      },
    };
    await this.service.updatePackageModel({
      where: params,
      data,
      select: { id: true },
    });
  }
}
