/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TextMaterial as PrismaTextMaterial,
  Lesson as PrismaLesson,
} from "@prisma/client";

export class TextMaterialServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TextMaterialCountArgs, "select">
  ): Promise<number> {
    return this.prisma.textMaterial.count(args);
  }

  async textMaterials(
    args: Prisma.TextMaterialFindManyArgs
  ): Promise<PrismaTextMaterial[]> {
    return this.prisma.textMaterial.findMany(args);
  }
  async textMaterial(
    args: Prisma.TextMaterialFindUniqueArgs
  ): Promise<PrismaTextMaterial | null> {
    return this.prisma.textMaterial.findUnique(args);
  }
  async createTextMaterial(
    args: Prisma.TextMaterialCreateArgs
  ): Promise<PrismaTextMaterial> {
    return this.prisma.textMaterial.create(args);
  }
  async updateTextMaterial(
    args: Prisma.TextMaterialUpdateArgs
  ): Promise<PrismaTextMaterial> {
    return this.prisma.textMaterial.update(args);
  }
  async deleteTextMaterial(
    args: Prisma.TextMaterialDeleteArgs
  ): Promise<PrismaTextMaterial> {
    return this.prisma.textMaterial.delete(args);
  }

  async getLesson(parentId: string): Promise<PrismaLesson | null> {
    return this.prisma.textMaterial
      .findUnique({
        where: { id: parentId },
      })
      .lesson();
  }
}
