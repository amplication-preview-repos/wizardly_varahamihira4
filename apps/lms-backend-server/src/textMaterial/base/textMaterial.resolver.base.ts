/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TextMaterial } from "./TextMaterial";
import { TextMaterialCountArgs } from "./TextMaterialCountArgs";
import { TextMaterialFindManyArgs } from "./TextMaterialFindManyArgs";
import { TextMaterialFindUniqueArgs } from "./TextMaterialFindUniqueArgs";
import { CreateTextMaterialArgs } from "./CreateTextMaterialArgs";
import { UpdateTextMaterialArgs } from "./UpdateTextMaterialArgs";
import { DeleteTextMaterialArgs } from "./DeleteTextMaterialArgs";
import { Lesson } from "../../lesson/base/Lesson";
import { TextMaterialService } from "../textMaterial.service";
@graphql.Resolver(() => TextMaterial)
export class TextMaterialResolverBase {
  constructor(protected readonly service: TextMaterialService) {}

  async _textMaterialsMeta(
    @graphql.Args() args: TextMaterialCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TextMaterial])
  async textMaterials(
    @graphql.Args() args: TextMaterialFindManyArgs
  ): Promise<TextMaterial[]> {
    return this.service.textMaterials(args);
  }

  @graphql.Query(() => TextMaterial, { nullable: true })
  async textMaterial(
    @graphql.Args() args: TextMaterialFindUniqueArgs
  ): Promise<TextMaterial | null> {
    const result = await this.service.textMaterial(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TextMaterial)
  async createTextMaterial(
    @graphql.Args() args: CreateTextMaterialArgs
  ): Promise<TextMaterial> {
    return await this.service.createTextMaterial({
      ...args,
      data: {
        ...args.data,

        lesson: args.data.lesson
          ? {
              connect: args.data.lesson,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TextMaterial)
  async updateTextMaterial(
    @graphql.Args() args: UpdateTextMaterialArgs
  ): Promise<TextMaterial | null> {
    try {
      return await this.service.updateTextMaterial({
        ...args,
        data: {
          ...args.data,

          lesson: args.data.lesson
            ? {
                connect: args.data.lesson,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TextMaterial)
  async deleteTextMaterial(
    @graphql.Args() args: DeleteTextMaterialArgs
  ): Promise<TextMaterial | null> {
    try {
      return await this.service.deleteTextMaterial(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Lesson, {
    nullable: true,
    name: "lesson",
  })
  async getLesson(
    @graphql.Parent() parent: TextMaterial
  ): Promise<Lesson | null> {
    const result = await this.service.getLesson(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
