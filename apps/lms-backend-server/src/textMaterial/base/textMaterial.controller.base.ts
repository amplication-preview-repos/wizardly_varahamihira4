/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TextMaterialService } from "../textMaterial.service";
import { TextMaterialCreateInput } from "./TextMaterialCreateInput";
import { TextMaterial } from "./TextMaterial";
import { TextMaterialFindManyArgs } from "./TextMaterialFindManyArgs";
import { TextMaterialWhereUniqueInput } from "./TextMaterialWhereUniqueInput";
import { TextMaterialUpdateInput } from "./TextMaterialUpdateInput";

export class TextMaterialControllerBase {
  constructor(protected readonly service: TextMaterialService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TextMaterial })
  async createTextMaterial(
    @common.Body() data: TextMaterialCreateInput
  ): Promise<TextMaterial> {
    return await this.service.createTextMaterial({
      data: {
        ...data,

        lesson: data.lesson
          ? {
              connect: data.lesson,
            }
          : undefined,
      },
      select: {
        content: true,
        createdAt: true,
        id: true,

        lesson: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TextMaterial] })
  @ApiNestedQuery(TextMaterialFindManyArgs)
  async textMaterials(@common.Req() request: Request): Promise<TextMaterial[]> {
    const args = plainToClass(TextMaterialFindManyArgs, request.query);
    return this.service.textMaterials({
      ...args,
      select: {
        content: true,
        createdAt: true,
        id: true,

        lesson: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TextMaterial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async textMaterial(
    @common.Param() params: TextMaterialWhereUniqueInput
  ): Promise<TextMaterial | null> {
    const result = await this.service.textMaterial({
      where: params,
      select: {
        content: true,
        createdAt: true,
        id: true,

        lesson: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TextMaterial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTextMaterial(
    @common.Param() params: TextMaterialWhereUniqueInput,
    @common.Body() data: TextMaterialUpdateInput
  ): Promise<TextMaterial | null> {
    try {
      return await this.service.updateTextMaterial({
        where: params,
        data: {
          ...data,

          lesson: data.lesson
            ? {
                connect: data.lesson,
              }
            : undefined,
        },
        select: {
          content: true,
          createdAt: true,
          id: true,

          lesson: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TextMaterial })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTextMaterial(
    @common.Param() params: TextMaterialWhereUniqueInput
  ): Promise<TextMaterial | null> {
    try {
      return await this.service.deleteTextMaterial({
        where: params,
        select: {
          content: true,
          createdAt: true,
          id: true,

          lesson: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
