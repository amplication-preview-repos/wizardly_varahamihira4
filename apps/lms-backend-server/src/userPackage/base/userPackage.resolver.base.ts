/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserPackage } from "./UserPackage";
import { UserPackageCountArgs } from "./UserPackageCountArgs";
import { UserPackageFindManyArgs } from "./UserPackageFindManyArgs";
import { UserPackageFindUniqueArgs } from "./UserPackageFindUniqueArgs";
import { CreateUserPackageArgs } from "./CreateUserPackageArgs";
import { UpdateUserPackageArgs } from "./UpdateUserPackageArgs";
import { DeleteUserPackageArgs } from "./DeleteUserPackageArgs";
import { PackageModel } from "../../packageModel/base/PackageModel";
import { User } from "../../user/base/User";
import { UserPackageService } from "../userPackage.service";
@graphql.Resolver(() => UserPackage)
export class UserPackageResolverBase {
  constructor(protected readonly service: UserPackageService) {}

  async _userPackagesMeta(
    @graphql.Args() args: UserPackageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserPackage])
  async userPackages(
    @graphql.Args() args: UserPackageFindManyArgs
  ): Promise<UserPackage[]> {
    return this.service.userPackages(args);
  }

  @graphql.Query(() => UserPackage, { nullable: true })
  async userPackage(
    @graphql.Args() args: UserPackageFindUniqueArgs
  ): Promise<UserPackage | null> {
    const result = await this.service.userPackage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserPackage)
  async createUserPackage(
    @graphql.Args() args: CreateUserPackageArgs
  ): Promise<UserPackage> {
    return await this.service.createUserPackage({
      ...args,
      data: {
        ...args.data,

        packageField: args.data.packageField
          ? {
              connect: args.data.packageField,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => UserPackage)
  async updateUserPackage(
    @graphql.Args() args: UpdateUserPackageArgs
  ): Promise<UserPackage | null> {
    try {
      return await this.service.updateUserPackage({
        ...args,
        data: {
          ...args.data,

          packageField: args.data.packageField
            ? {
                connect: args.data.packageField,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserPackage)
  async deleteUserPackage(
    @graphql.Args() args: DeleteUserPackageArgs
  ): Promise<UserPackage | null> {
    try {
      return await this.service.deleteUserPackage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => PackageModel, {
    nullable: true,
    name: "packageField",
  })
  async getPackageField(
    @graphql.Parent() parent: UserPackage
  ): Promise<PackageModel | null> {
    const result = await this.service.getPackageField(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: UserPackage): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
