/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserPracticeResponseService } from "../userPracticeResponse.service";
import { UserPracticeResponseCreateInput } from "./UserPracticeResponseCreateInput";
import { UserPracticeResponse } from "./UserPracticeResponse";
import { UserPracticeResponseFindManyArgs } from "./UserPracticeResponseFindManyArgs";
import { UserPracticeResponseWhereUniqueInput } from "./UserPracticeResponseWhereUniqueInput";
import { UserPracticeResponseUpdateInput } from "./UserPracticeResponseUpdateInput";

export class UserPracticeResponseControllerBase {
  constructor(protected readonly service: UserPracticeResponseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserPracticeResponse })
  async createUserPracticeResponse(
    @common.Body() data: UserPracticeResponseCreateInput
  ): Promise<UserPracticeResponse> {
    return await this.service.createUserPracticeResponse({
      data: {
        ...data,

        practice: data.practice
          ? {
              connect: data.practice,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        practice: {
          select: {
            id: true,
          },
        },

        response: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserPracticeResponse] })
  @ApiNestedQuery(UserPracticeResponseFindManyArgs)
  async userPracticeResponses(
    @common.Req() request: Request
  ): Promise<UserPracticeResponse[]> {
    const args = plainToClass(UserPracticeResponseFindManyArgs, request.query);
    return this.service.userPracticeResponses({
      ...args,
      select: {
        createdAt: true,
        id: true,

        practice: {
          select: {
            id: true,
          },
        },

        response: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserPracticeResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userPracticeResponse(
    @common.Param() params: UserPracticeResponseWhereUniqueInput
  ): Promise<UserPracticeResponse | null> {
    const result = await this.service.userPracticeResponse({
      where: params,
      select: {
        createdAt: true,
        id: true,

        practice: {
          select: {
            id: true,
          },
        },

        response: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserPracticeResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserPracticeResponse(
    @common.Param() params: UserPracticeResponseWhereUniqueInput,
    @common.Body() data: UserPracticeResponseUpdateInput
  ): Promise<UserPracticeResponse | null> {
    try {
      return await this.service.updateUserPracticeResponse({
        where: params,
        data: {
          ...data,

          practice: data.practice
            ? {
                connect: data.practice,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          practice: {
            select: {
              id: true,
            },
          },

          response: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserPracticeResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserPracticeResponse(
    @common.Param() params: UserPracticeResponseWhereUniqueInput
  ): Promise<UserPracticeResponse | null> {
    try {
      return await this.service.deleteUserPracticeResponse({
        where: params,
        select: {
          createdAt: true,
          id: true,

          practice: {
            select: {
              id: true,
            },
          },

          response: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
