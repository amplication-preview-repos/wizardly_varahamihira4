/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserPracticeResponse as PrismaUserPracticeResponse,
  Practice as PrismaPractice,
  User as PrismaUser,
} from "@prisma/client";

export class UserPracticeResponseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserPracticeResponseCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userPracticeResponse.count(args);
  }

  async userPracticeResponses(
    args: Prisma.UserPracticeResponseFindManyArgs
  ): Promise<PrismaUserPracticeResponse[]> {
    return this.prisma.userPracticeResponse.findMany(args);
  }
  async userPracticeResponse(
    args: Prisma.UserPracticeResponseFindUniqueArgs
  ): Promise<PrismaUserPracticeResponse | null> {
    return this.prisma.userPracticeResponse.findUnique(args);
  }
  async createUserPracticeResponse(
    args: Prisma.UserPracticeResponseCreateArgs
  ): Promise<PrismaUserPracticeResponse> {
    return this.prisma.userPracticeResponse.create(args);
  }
  async updateUserPracticeResponse(
    args: Prisma.UserPracticeResponseUpdateArgs
  ): Promise<PrismaUserPracticeResponse> {
    return this.prisma.userPracticeResponse.update(args);
  }
  async deleteUserPracticeResponse(
    args: Prisma.UserPracticeResponseDeleteArgs
  ): Promise<PrismaUserPracticeResponse> {
    return this.prisma.userPracticeResponse.delete(args);
  }

  async getPractice(parentId: string): Promise<PrismaPractice | null> {
    return this.prisma.userPracticeResponse
      .findUnique({
        where: { id: parentId },
      })
      .practice();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.userPracticeResponse
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
